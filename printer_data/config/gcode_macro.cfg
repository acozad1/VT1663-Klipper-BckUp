[respond]
default_type: echo
default_prefix:
   
[gcode_macro motor_amps]
description: change motor amperage on the fly
gcode:
 SET_TMC_CURRENT STEPPER=stepper_x CURRENT={params.CURRENT|default(1.6)}
 SET_TMC_CURRENT STEPPER=stepper_y CURRENT={params.CURRENT|default(1.6)}
#  SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={params.CURRENT|default(1.8)}
#  SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={params.CURRENT|default(1.8)}

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)
## Beacon Contact logic (if you have one. 4 lines at 4 locations)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  #BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

  ##  Uncomment if you have a Nevermore.
    SET_PIN PIN=nevermore VALUE=1                       # Turn on the nevermore
  
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    #SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    #STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c
  CLEAN_NOZZLE
  
  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  #STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE ADAPTIVE=1                       # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
  CARTOGRAPHER_TOUCH                ; Perform touch probe
  
  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  #STATUS_HEATING                                        # Set LEDs to heating-mode
  SMART_PARK                                            # Smart Park Kamp 
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning                                    
  LINE_PURGE                                            # Primeline
  G90                                                   # Absolute position
  
  
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G91                            ; relative positioning
    G1 E-10.0 F3600                ; retract filament
    G92 E0                         ; zero the extruder
    G0 Z1.00 X20.0 Y20.0 F10000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z10 F3000                   ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0 X150 Y300 F9000             ; park nozzle at rear
    # BED_MESH_CLEAR
    # SET_NOZZLE_LEDS_OFF
    # STATUS_READY
    SET_VELOCITY_LIMIT ACCEL=20000 MINIMUM_CRUISE_RATIO=0.5 SQUARE_CORNER_VELOCITY=20
    # SET_PIN PIN=LED_Back VALUE=0
    # SET_PIN PIN=LED_Main VALUE=0.02
    #SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=mcu TARGET=55.0
    # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Bedfans TARGET=10
    g10
    {action_respond_info("Print Complete!")}
    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
    SET_PIN PIN=nevermore VALUE=0
    M84

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SAVE_GCODE_STATE NAME=STATE_PRINT_CANCEL
    G10
    G92 E0                         ; zero the extruder
    M107                           ; turn off fan
    G91                            ; relative positioning
    G1 Z10 F3000                   ; move nozzle up 10mm
    G90                            ; absolute positioning
    G0 X150 Y300 F9000             ; park nozzle at rear
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SET_VELOCITY_LIMIT ACCEL=20000 MINIMUM_CRUISE_RATIO=0.5 SQUARE_CORNER_VELOCITY=20
    RESTORE_GCODE_STATE NAME=STATE_PRINT_CANCEL MOVE=0
    # SET_PIN PIN=LED_Back VALUE=0
    # SET_PIN PIN=LED_Main VALUE=0.02
    # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Bedfans TARGET=10
    # SET_NOZZLE_LEDS_OFF
    # STATUS_READY
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=MCU TARGET=65.0
    SDCARD_RESET_FILE

[gcode_macro G32]
gcode:
    STATUS_LEVELING
    BED_MESH_CLEAR
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
    PROBE_SWITCH METHOD=automatic
    Z_TILT_ADJUST
    G28 Z
    G90
    G0 X150 Y150 Z10 F18000
    STATUS_READY

[gcode_macro M141]
gcode:
    {% set s = params.s|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="Exhaust" TARGET{params.S}

[gcode_macro Park]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 G0 X150 Y300 f18000  

[gcode_macro M191]
variable_chambertargettemp: 0
gcode:
    SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={params.S}                   ; set target temp for reference outside of the macro (for the loop)
    
    {% if not printer["temperature_fan chamber"].temperature >= S|int %}                 ; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
        { action_respond_info("Chamber not at temp yet, pausing...") }
            {% if not printer.pause_resume.is_paused %}
                PAUSE                                                                   ; pause if not already paused
            {% endif %}
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=5                                   ; start wait loop
    {% else %}
        { action_respond_info("Chamber at or above temp, continuing...") }             ; ##IF CHAMBER TEMP IS ALREADY REACHED##
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=0                                   ; break wait loop if it happens to be running already (shouldn't be)
        {% if printer.pause_resume.is_paused %}
            RESUME                                                                       ; resume if paused (shouldn't be)
        {% endif %}
    {% endif %}

[delayed_gcode M191-Wait]
gcode:
    {% if printer["temperature_fan chamber"].temperature >= printer["gcode_macro M191"].chambertargettemp|int %} ; ##IF CHAMBER TEMP IS REACHED##
        { action_respond_info("Chamber at or above temp, continuing...") }
            {% if printer.pause_resume.is_paused %}
                RESUME                                                                                                        ; break loop, resume print
            {% endif %}
    {% else %}                                                                                                             ; ##IF CHAMBER TEMP IS NOT YET REACHED##
        { action_respond_info("Chamber not at temp yet, waiting...") }
        UPDATE_DELAYED_GCODE ID=M191-Wait DURATION=5                                                                        ; continue waiting loop
    {% endif %}

#############################################################################################################
# WARMUP MACRO
#############################################################################################################
[gcode_macro Warmup]
variable_maxx: 10000 ; From X Shaper suggestion
variable_maxy: 10000 ; From Y Shaper suggestion
variable_maxd: 14142.14 ; = SQRT(2*maxy)

gcode:
 {% if 'LOOPS' in params|upper %}
 {% set loop_cnt = params.LOOPS|int %}
 {% endif %}
 {% if 'MAXX' in params|upper %}
 {% set maxx = params.MAXX|int %}
 {% endif %}
 {% if 'MAXY' in params|upper %}
 {% set maxy = params.MAXY|int %}
 {% endif %}
 {% set max_x = (printer.toolhead.axis_maximum.x|int-5) %}
 {% set max_y = (printer.toolhead.axis_maximum.y|int-5) %}
 {% set loop_step_y = max_y//(loop_cnt-1) %}
 {% set loop_step_x = max_x//(loop_cnt-1) %}
 M117 {max_y}
 G28
 ; Exercise X-Axis at Max acceleration per input shaping = Max_X_Accel
 SET_VELOCITY_LIMIT ACCEL={maxx} ACCEL_TO_DECEL={maxx/2}
 {% for number in range(10,max_y+11,loop_step_y) %}
   {% if number >= max_y %}
   {% set number = max_y %}
   {% endif %}
   G1 F{maxy} X10 Y{number}
   G1 F{maxx} X{max_x} Y{number}
 {% endfor %}
 ; Exercise Y-Axis at Max acceleration per input shaping = Max_Y_Accel

 SET_VELOCITY_LIMIT ACCEL={maxy} ACCEL_TO_DECEL={maxy/2}
 {% for number in range(10,max_x+11,loop_step_y) %}
   {% if number >= max_x %}
   {% set number = max_x %}
   {% endif %}
   G1 F{maxy} X{number} Y{max_y}
   G1 F{maxy} X{number} Y10
 {% endfor %}

 ; Exercise Diagonal Movement @ Max Diagonal Acceleration = SQRT(2*Max_Y_Accel^2)

 SET_VELOCITY_LIMIT ACCEL={maxd} ACCEL_TO_DECEL={maxd/2}
 {% for times in range(loop_cnt) %}
   G1 F{maxx} X10 Y10
   G1 F{maxd} X{max_x} Y{max_y}
   G1 F{maxx} X10 Y{max_y}
   G1 F{maxd} X{max_x} Y10
   G1 F{maxy} X{max_x} Y{max_y}
   G1 F{maxd} X10 Y10
   G1 F{maxy} X10 Y{max_y}
   G1 F{maxd} X{max_x} Y10
 {% endfor %}

  ; Exercise in Square Motion

 SET_VELOCITY_LIMIT ACCEL={maxx} ACCEL_TO_DECEL={maxx/2}
 {% for times in range(loop_cnt) %}
   G1 F{maxy} X10 Y10
   G1 F{maxy} X10 Y{max_y}
   G1 F{maxx} X{max_x} Y{max_y}
   G1 F{maxy} X{max_x} Y10
   G1 F{maxx} X10 Y10
   G1 F{maxx} X{max_x} Y10
   G1 F{maxy} X{max_x} Y{max_y}
   G1 F{maxx} X10 Y{max_y}
 {% endfor %}

##########################################################
##          Klipper Screen Macros
##########################################################
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E50 F300                    ; slower extrusion for hotend path
   G1 E50 F1800                  ; quickly load filament to down bowden
   G1 E50 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E5 F300                    ; extrude a little to soften tip
   G1 E-120 F1800                 ; retract filament completely
   M82
   
#[gcode_macro LOAD_FILAMENT]
#variable_load_distance:  50
#variable_purge_distance:  25
#gcode:
    #{% set speed = params.SPEED|default(300) %}
    #{% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    #SAVE_GCODE_STATE NAME=load_state
    #G91
    #G92 E0
    #G1 E{load_distance} F{max_velocity} # fast-load
    #G1 E{purge_distance} F{speed} # purge
    #RESTORE_GCODE_STATE NAME=load_state

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}

  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

######################################################################
## Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

####################################################################
# Clean Nozzle
####################################################################
[gcode_macro CLEAN_NOZZLE]
description: CLEAN_NOZZLE
variable_start_x: 252
variable_start_y: 299
variable_start_z: 0.4
variable_wipe_dist: -48
variable_wipe_qty: 5
variable_wipe_spd: 200
variable_raise_distance: 10
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
 G90                                            ; absolute positioning
 ## Move nozzle to start position
 G1 X{start_x} Y{start_y} F6000
 G1 Z{start_z} F1500
 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}
  Raise nozzle
 G1 Z{raise_distance}
 STATUS_READY

 ####################################################################
 # FAN CONTROLLER 
 ####################################################################
 [gcode_macro M106]
gcode:
    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
    SET_FAN_SPEED FAN={fan} SPEED={speed}

#####################################################################
# Klipper Backup
#####################################################################
[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True

